name: Build and Push n8n Enterprise Docker Image

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mroplus/n8n
  IMAGE_TAG: enterprise

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4

    - name: Clone n8n repository
      run: |
        git clone https://github.com/n8n-io/n8n.git n8n-source
        cd n8n-source
        git fetch --tags

        releases_json=$(curl -s https://api.github.com/repos/n8n-io/n8n/releases)
        latest_stable_tag=$(echo "$releases_json" | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -n 1)
        if [ -n "$latest_stable_tag" ]; then
          git checkout "$latest_stable_tag"
        fi

        n8n_commit_hash=$(git rev-parse HEAD)
        echo "Cloned n8n repository successfully"
        echo "Current commit: $n8n_commit_hash"
        echo "N8N_COMMIT_HASH=$n8n_commit_hash" >> $GITHUB_ENV

    - name: Copy bypass script to n8n repository
      run: |
        if [ -f "bypass.sh" ]; then
          cp bypass.sh n8n-source/
          echo "bypass.sh copied to n8n-source directory"
        else
          echo "bypass.sh not found in current repository"
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('n8n-source/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: |
        cd n8n-source
        pnpm install --frozen-lockfile

    - name: Run bypass script
      run: |
        cd n8n-source
        if [ -f "bypass.sh" ]; then
          chmod +x bypass.sh
          ./bypass.sh --auto
          echo "bypass.sh executed successfully with --auto mode"
        else
          echo "bypass.sh not found in n8n repository, skipping..."
        fi

    - name: Build n8n
      run: |
        cd n8n-source
        pnpm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=${{ env.IMAGE_TAG }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build Docker image
      run: |
        cd n8n-source
        pnpm run build:docker

    - name: Tag and push Docker image
      run: |
        cd n8n-source
        
        # List all available images for debugging
        echo "Available Docker images:"
        docker images
        
        echo "Available Podman images:"
        podman images
        
        # The n8n build process uses podman, so look for the image there first
        echo "=== SEARCHING FOR N8N IMAGE IN PODMAN ==="
        
        # First, let's see all podman images for debugging
        echo "All podman images:"
        podman images
        
        # Look for n8n images in podman with exact matching
        echo "Searching for n8n images..."
        PODMAN_N8N_IMAGES=$(podman images --format "{{.Repository}} {{.Tag}} {{.ID}}" | grep "n8nio/n8n" || true)
        
        if [ -z "$PODMAN_N8N_IMAGES" ]; then
          echo "No n8nio/n8n images found in podman, trying localhost prefix..."
          PODMAN_N8N_IMAGES=$(podman images --format "{{.Repository}} {{.Tag}} {{.ID}}" | grep "localhost/n8nio/n8n" || true)
        fi
        
        echo "Found n8n images in podman:"
        echo "$PODMAN_N8N_IMAGES"
        
        if [ -n "$PODMAN_N8N_IMAGES" ]; then
          # Get the first (most recent) n8n image
          PODMAN_IMAGE=$(echo "$PODMAN_N8N_IMAGES" | head -1)
          PODMAN_REPO=$(echo "$PODMAN_IMAGE" | awk '{print $1}')
          PODMAN_TAG=$(echo "$PODMAN_IMAGE" | awk '{print $2}')
          PODMAN_IMAGE_ID=$(echo "$PODMAN_IMAGE" | awk '{print $3}')
          PODMAN_IMAGE_NAME="${PODMAN_REPO}:${PODMAN_TAG}"
          
          echo "=== SELECTED IMAGE ==="
          echo "Repository: $PODMAN_REPO"
          echo "Tag: $PODMAN_TAG"  
          echo "ID: $PODMAN_IMAGE_ID"
          echo "Full name: $PODMAN_IMAGE_NAME"
          
          # Verify the image exists in podman before transfer
          if ! podman image exists "$PODMAN_IMAGE_NAME"; then
            echo "ERROR: Image $PODMAN_IMAGE_NAME does not exist in podman!"
            exit 1
          fi
          
          echo "=== TRANSFERRING IMAGE FROM PODMAN TO DOCKER ==="
          # Transfer with error checking
          if podman save "$PODMAN_IMAGE_NAME" | docker load; then
            echo "✅ Image transfer successful"
          else
            echo "❌ Image transfer failed"
            exit 1
          fi
          
          # Verify the image now exists in docker
          echo "=== VERIFYING IMAGE IN DOCKER ==="
          docker images
          
          # Find the transferred image in docker
          IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep -E "(n8nio/n8n|localhost/n8nio/n8n)" | head -1 | awk '{print $2}')
          
          if [ -z "$IMAGE_ID" ]; then
            echo "❌ Image not found in docker after transfer. Trying alternative search..."
            # Try without the localhost prefix in case docker strips it
            IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep "n8nio/n8n" | head -1 | awk '{print $2}')
          fi
          
        else
          echo "=== NO N8N IMAGE IN PODMAN - CHECKING DOCKER DIRECTLY ==="
          IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep -E "(n8nio/n8n|n8n-io/n8n)" | head -1 | awk '{print $2}')
        fi
        
        if [ -z "$IMAGE_ID" ]; then
          echo "❌ FATAL ERROR: Could not find n8n Docker image!"
          echo "Expected patterns: localhost/n8nio/n8n, n8nio/n8n, or n8n-io/n8n"
          echo "Final docker images list:"
          docker images
          exit 1
        fi
        
        echo "Found Docker image with ID: $IMAGE_ID"
        echo "N8N commit hash: ${{ env.N8N_COMMIT_HASH }}"
        
        # Tag the image for GHCR with your custom tags
        docker tag $IMAGE_ID ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker tag $IMAGE_ID ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker tag $IMAGE_ID ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag $IMAGE_ID ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:n8n-${{ env.N8N_COMMIT_HASH }}
        
        # Also tag with metadata-generated tags for additional flexibility
        echo "Adding metadata-generated tags..."
        IFS=$'\n'
        for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
          echo "Tagging: $tag"
          docker tag $IMAGE_ID $tag
        done
        
        # Push your custom tags
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:n8n-${{ env.N8N_COMMIT_HASH }}
        
        # Push metadata-generated tags
        echo "Pushing metadata-generated tags..."
        for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
          echo "Pushing: $tag"
          docker push $tag
        done
        
        echo "Successfully pushed Docker image to GHCR"

    - name: Clean up
      if: always()
      run: |
        docker system prune -f
